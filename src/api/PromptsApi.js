/**
 * BombBomb
 * We make it easy to use simple video to build relationships
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/JerichoConfiguration'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/JerichoConfiguration'));
  } else {
    // Browser globals (root is window)
    if (!root.BombbombNodejsOpenapi) {
      root.BombbombNodejsOpenapi = {};
    }
    root.BombbombNodejsOpenapi.PromptsApi = factory(root.BombbombNodejsOpenapi.ApiClient, root.BombbombNodejsOpenapi.JerichoConfiguration);
  }
}(this, function(ApiClient, JerichoConfiguration) {
  'use strict';

  /**
   * Prompts service.
   * @module api/PromptsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PromptsApi. 
   * @alias module:api/PromptsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createVideoEmailPrompt operation.
     * @callback module:api/PromptsApi~createVideoEmailPromptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prompts user to send a video
     * Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
     * @param {module:model/JerichoConfiguration} prompt The Video Email Prompt to be created
     * @param {module:api/PromptsApi~createVideoEmailPromptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createVideoEmailPrompt = function(prompt, callback) {
      var postBody = prompt;

      // verify the required parameter 'prompt' is set
      if (prompt == undefined || prompt == null) {
        throw "Missing the required parameter 'prompt' when calling createVideoEmailPrompt";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/prompt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoEmailPrompt operation.
     * @callback module:api/PromptsApi~getVideoEmailPromptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a prompt
     * Gets a prompt
     * @param {String} id The Id of the prompt
     * @param {module:api/PromptsApi~getVideoEmailPromptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getVideoEmailPrompt = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getVideoEmailPrompt";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/prompt/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the respondToVideoEmailPrompt operation.
     * @callback module:api/PromptsApi~respondToVideoEmailPromptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Respond to a prompt
     * Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
     * @param {String} id The id of the prompt.
     * @param {String} choice The users&#39; selection. Can be: WithVideo, WithoutVideo, Cancel
     * @param {Object} opts Optional parameters
     * @param {String} opts.videoId The id of the video.
     * @param {module:api/PromptsApi~respondToVideoEmailPromptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.respondToVideoEmailPrompt = function(id, choice, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling respondToVideoEmailPrompt";
      }

      // verify the required parameter 'choice' is set
      if (choice == undefined || choice == null) {
        throw "Missing the required parameter 'choice' when calling respondToVideoEmailPrompt";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'videoId': opts['videoId'],
        'choice': choice
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/prompt/{id}/response', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
